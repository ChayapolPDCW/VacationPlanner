services:
  frontend:
    image: ${COMPOSE_PROJECT_NAME}/frontend:dev
    build:
      context: ./frontend
      dockerfile: dev.Dockerfile
      args:
        - NODE_VERSION=22.14.0
    env_file:
      - ./frontend/.env
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT:?error}"
    networks:
      - public
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    profiles:
      - development
    command: npm run dev -- --port ${FRONTEND_PORT}

  backend:
    image: ${COMPOSE_PROJECT_NAME}/backend:dev
    build:
      context: ./backend
      target: dev
      args:
        - NODE_VERSION=22.14.0
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT:?error}"
      - "9229:9229"
      - "9230:9230"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - /app/src/generated
    networks:
      - public
      - private
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles:
      - development
    command: npm run dev

  db:
    image: postgres:17-alpine
    restart: always
    env_file:
      - ./backend/.env.container
    ports:
      - "${DATABASE_PORT}:${DATABASE_PORT:?error}"
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - private
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 5s
      retries: 10
    profiles:
      - development
    command: postgres -c listen_addresses='*'
    
  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "${REDIS_PORT}:${REDIS_PORT:?error}"
    volumes:
      - redis-data:/data
    networks:
      - private
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 10
    profiles:
      - development
    command: redis-server --appendonly yes

networks:
  public:
    # external: true
  private:
    # internal: true

volumes:
  db-data:
  redis-data:
